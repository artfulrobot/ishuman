<?php
use Drupal\Core\Form\FormStateInterface;

function ishuman_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#ishuman']) || ishuman_should_protect($form_id)) {
    // Protection needed.
    $form['ishuman'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => ['ishuman'],
      ],
      '#element_validate' => ['ishuman_ishuman_validate'],
    ];
    if (!isset($form['#attached'])) {
      $form['#attached'] = [];
    }
    if (!isset($form['#attached']['js'])) {
      $form['#attached']['library'] = [];
    }
    $form['#attached']['library'][] = 'ishuman/ishuman';
  }
}


/**
 * Determine whether this form should be protected.
 */
function ishuman_should_protect($form_id) {
  $config = Drupal::service('config.factory')->get('ishuman.config');

  $protect = array_filter(preg_split('/[\r\n]+/', $config->get('protect')));
  foreach ($protect as $pattern) {
    if ($pattern && fnmatch($pattern, $form_id)) {
      return TRUE;
    }
  }
  return FALSE;
}
function ishuman_ishuman_validate($element, FormStateInterface $form_state, $form) {
  if (\Drupal::currentUser()->hasPermission('skip_ishuman_test')) {
    // Skip for permissioned users.
    return;
  }

  if (!ishuman_key_is_valid($element['#value'])) {
    $form_state->setError($element, t('Sorry, we could not accept this form submission. Please wait 30s and try again.'));
  }
  else {
    // User has successfully submitted this form.
    // Remember this for future.
    // So send the form with a ready-to-roll key.
    $key = ishuman_make_key();

    $form_state->setValueForElement($element, $key);
    // I'm not sure why this does not seem to work...
    // form_set_value($element, $key, $form_state);
    // ...but without this next line the new $key is not output in the form that
    // will be sent back to the user if there's other validation errors.
    // $form_state['complete form']['ishuman']['#value'] = $key;
  }
}

function ishuman_key_is_valid($key) {
  if (!preg_match('/^(\d{14})([0-9a-f]{32})$/', $key, $matches)) {
    // log. @todo.
    ishuman_log($key, "FAIL: regex");
    return FALSE;
  }
  // how old is it?
  $too_old = date('YmdHis', strtotime('now - 5 minutes)'));
  if ($matches[1] < $too_old) {
    // log too old.
    ishuman_log($key, "FAIL: expired");
    return FALSE;
  }
  $too_young = date('YmdHis', strtotime('now - 2 seconds'));
  if ($matches[1] > $too_young) {
    // log too young.
    ishuman_log($key, "FAIL: inactive");
    return FALSE;
  }

  $hash = ishuman_make_key($matches[1]);
  if ($hash != $key) {
    // log. attempt to fake key (or ip address change...)
    ishuman_log($key, "FAIL: invalid");
    return FALSE;
  }

  // Has it been used before?
  /*
  $seen = db_select('ishuman_key')->fields('ishuman_key')
    ->condition('ihid', $key)
    ->execute()
    ->rowCount();

  if ($seen) {
    ishuman_log($key, "FAIL: seen");
    return FALSE;
  }

  // Looks OK then.
  db_insert('ishuman_key')
    ->fields([ 'ihid' => $key ])
    ->execute();

   */
  ishuman_log($key, "OK");
  return TRUE;
}

/**
 * Make key.
 *
 * Keys contain a datestamp (plain text) and a hash unique to the IP address and the datestamp, plus some salt.
 *
 * @param string $timestamp YmdHis timestamp. If not given defaults to now.
 * @return string
 */
function ishuman_make_key($timestamp=NULL) {
  $config = Drupal::service('config.factory')->get('ishuman.config');
  $salt = $config->get('salt');
  $timestamp = $timestamp ? $timestamp : date('YmdHis');
  return $timestamp . md5($timestamp . $_SERVER['REMOTE_ADDR'] . $salt);
}

function ishuman_log($key, $message) {
  \Drupal::logger('ishuman')->notice("@message, @key", ['@message' => $message, '@key' => $key]);
}
