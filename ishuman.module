<?php

function ishuman_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['#ishuman']) || ishuman_should_protect($form_id)) {
    // Protection needed.
    $form['ishuman'] = [
      '#type' => 'hidden',
      '#attributes' => [
        'class' => ['ishuman'],
      ],
      '#element_validate' => ['ishuman_ishuman_validate'],
    ];
    if (!isset($form['#attached'])) {
      $form['#attached'] = [];
    }
    if (!isset($form['#attached']['js'])) {
      $form['#attached']['js'] = [];
    }
    $form['#attached']['js'][drupal_get_path('module', 'ishuman') . '/ishuman.js'] = [];
  }
}

function ishuman_menu() {
  $items['ishuman-ajax'] = [
    'page callback' => 'ishuman_get_key',
    'access arguments' => ['access content'],
  ];
  $items['admin/reports/ishuman'] = [
    'title' => 'Is Human test form',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ishuman_form_test'],
    'access arguments' => ['access content'],
  ];
  $items['admin/config/content/ishuman'] = [
    'title' => 'Is Human configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ishuman_form_config'],
    'access arguments' => ['administer_ishuman'],
  ];
  return $items;
}

function ishuman_permission() {
  return [
    'skip_ishuman_test' => [
      'title' => 'Treat as human',
      'description' => 'Bypass the Is Human anti-spam module for users with this role',
    ],
    'administer_ishuman' => [
      'title' => 'Administer Is Human',
      'description' => 'Administer Is Human anti-spam module',
    ],
  ];
}

/**
 * Form callback for testing.
 */
function ishuman_form_test() {
  return [
    '#ishuman' => TRUE,
    'name' => [
      '#type' => 'textfield',
      '#title' => 'Name',
      '#required' => TRUE,
      '#description' => '<p>If you press submit too fast (~10s) it will fail.
      However if you submit it after 10s it should work. Also test: wait 10s
      but leave the required field empty. When it fails complete the field and
      submit again quickly - this second time you should not need to wait
      10s.</p>'
    ],
    'submit' => [
      '#type' => 'submit',
      '#value' => 'Test',
    ],
  ];
}
function ishuman_form_test_submit($form) {
  drupal_set_message('Submitted');
}

/**
 * Config form.
 */
function ishuman_form_config() {
  $form = array(
    'ishuman_salt' => array(
      '#title' => 'Salt',
      '#description' => t('Enter some random letters etc.'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ishuman_salt', md5(time())),
    ),
    'ishuman_protect' => array(
      '#title' => 'Form Ids to protect (you can use * for wildcard)',
      '#type' => 'textarea',
      '#rows' => 8,
      '#columns' => 60,
      '#description' => t('Enter form ids one per line. e.g. <code>comment_node_*_form</code>'),
      '#default_value' => variable_get('ishuman_protect',''),
    ),
  );
  return system_settings_form($form);
}


/**
 * Determine whether this form should be protected.
 */
function ishuman_should_protect($form_id) {
  $protect = array_filter(preg_split('/[\r\n]+/', variable_get('ishuman_protect', '')));
  foreach ($protect as $pattern) {
    if ($pattern && fnmatch($pattern, $form_id)) {
      return TRUE;
    }
  }
  return FALSE;
}
function ishuman_ishuman_validate($element, &$form_state, $form) {
  if (user_access('skip_ishuman_test')) {
    // Skip for permissioned users.
    return;
  }

  if (!ishuman_key_is_valid($element['#value'])) {
    form_set_error('ishuman', t('Sorry, we could not accept this form submission. Please wait 30s and try again.'));
    // or form_error($element, t('Sorry, this form is not available'));
  }
  else {
    // User has successfully submitted this form.
    // Remember this for future.
    // So send the form with a ready-to-roll key.
    $key = ishuman_make_key();
    // I'm not sure why this does not seem to work...
    form_set_value($element, $key, $form_state);
    // ...but without this next line the new $key is not output in the form that
    // will be sent back to the user if there's other validation errors.
    $form_state['complete form']['ishuman']['#value'] = $key;
  }
}

function ishuman_key_is_valid($key) {
  if (!preg_match('/^(\d{14})([0-9a-f]{32})$/', $key, $matches)) {
    // log. @todo.
    ishuman_log($key, "FAIL: regex");
    return FALSE;
  }
  // how old is it?
  $too_old = date('YmdHis', strtotime('now - 5 minutes)'));
  if ($matches[1] < $too_old) {
    // log too old.
    ishuman_log($key, "FAIL: expired");
    return FALSE;
  }
  $too_young = date('YmdHis', strtotime('now - 2 seconds'));
  if ($matches[1] > $too_young) {
    // log too young.
    ishuman_log($key, "FAIL: inactive");
    return FALSE;
  }

  $hash = ishuman_make_key($matches[1]);
  if ($hash != $key) {
    // log. attempt to fake key (or ip address change...)
    ishuman_log($key, "FAIL: invalid");
    return FALSE;
  }

  // Has it been used before?
  $seen = db_select('ishuman_key')->fields('ishuman_key')
    ->condition('ihid', $key)
    ->execute()
    ->rowCount();

  if ($seen) {
    ishuman_log($key, "FAIL: seen");
    return FALSE;
  }

  // Looks OK then.
  db_insert('ishuman_key')
    ->fields([ 'ihid' => $key ])
    ->execute();

  ishuman_log($key, "OK");
  return TRUE;
}

/**
 * Make key.
 *
 * Keys contain a datestamp (plain text) and a hash unique to the IP address and the datestamp, plus some salt.
 *
 * @param string $timestamp YmdHis timestamp. If not given defaults to now.
 * @return string
 */
function ishuman_make_key($timestamp=NULL) {
  $timestamp = $timestamp ? $timestamp : date('YmdHis');
  return $timestamp . md5($timestamp . $_SERVER['REMOTE_ADDR'] . variable_get('ishuman_salt', 'you should change this'));
}

/**
 * Ajax that returns a key.
 */
function ishuman_get_key() {
  echo ishuman_make_key();
  exit;
}
function ishuman_log($key, $message) {
  error_log("$_SERVER[REMOTE_ADDR]: $message, $key");
}
